
" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2016 Mar 25
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file (restore to previous version)
  set undofile		" keep an undo file (undo changes after closing)
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

if has('langmap') && exists('+langnoremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If unset (default), this may break plugins (but it's backward
  " compatible).
  set langnoremap
endif


" Add optional packages.
"
" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
packadd matchit


""""""""""""""""""""""""""""""""""""""""""""""
"            --- MINE TING :) ---            "
""""""""""""""""""""""""""""""""""""""""""""""

" Configure <Leader> as <Space>.
let mapleader = " "
nnoremap <Space> <NOP>
vnoremap <Space> <NOP>

" Disable arrow keys in normal and visual mode.
nnoremap <Left> <NOP>
nnoremap <Down> <NOP>
nnoremap <Up> <NOP>
nnoremap <Right> <NOP>
vnoremap <Left> <NOP>
vnoremap <Down> <NOP>
vnoremap <Up> <NOP>
vnoremap <Right> <NOP>

" Hardmode: h and l doesn't work in normal mode.
nnoremap <Leader>hardmode :nnoremap h oFY! <CR>:nnoremap l oFY! <CR>

" Show commands as they are typed in bottom right
set showcmd

" Show line number and relative number on the left.
set number
set relativenumber

" Flags for searching in file (/ or ? in normal mode)
set ignorecase
set incsearch
set hlsearch

" Make :find search every subdirectory of the working directory.
set path+=**

" Display all matching files when tab completing.
set wildmenu

" List open buffers and write ":b " in command mode.
" Why does this work??? With <Esc> instead of <CR>
" 	nnoremap gb :ls<Esc>:b 
nnoremap gb :ls<CR>:b 

" I don't remember what this does. See
" https://www.youtube.com/watch?v=XA2WjJbmmoM for reference.
syntax enable
filetype plugin on

" SNIPPETS
" Use <Leader> as first char in mappings in normal mode. Prepend <Leader>
" with <F2> in insert mode. Use *noremap so the mapping is not recursive.

" Substitute word under cursor with current date
nnoremap <Leader>wdate viw"=strftime('%c')<CR>p
" Insert the current date at cursor (normal mode)
nnoremap <Leader>date "=strftime('%c')<CR>p
" Insert the current date at cursor (insert mode)
inoremap <F2><Leader>date <Esc>"=strftime('%c')<CR>pa

" Surround selection in '', "", (), [], {} or <>
vnoremap <Leader>' <Esc><Esc>`<i'<Esc>`>la'<Esc>
vnoremap <Leader>" <Esc><Esc>`<i"<Esc>`>la"<Esc>
vnoremap <Leader>( <Esc><Esc>`<i(<Esc>`>la)<Esc>
vnoremap <Leader>[ <Esc><Esc>`<i[<Esc>`>la]<Esc>
vnoremap <Leader>{ <Esc><Esc>`<i{<Esc>`>la}<Esc>
vnoremap <Leader>< <Esc><Esc>`<i<<Esc>`>la><Esc>

" ABBREVIATIONS
" Usage:
" 	*abbrev [keyword] [substitute]
" * is the char that defines what mode the abbrev works in, e.g. i for insert
" mode. keyword is the word typed, and after pressing a char not in iskeyword (check
" with [:set iskeyword?]), it is substituted with substitute.
iabbrev fuvk fuck
